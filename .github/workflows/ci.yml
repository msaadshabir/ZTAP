name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-go:
    name: Go Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ["1.25.2"]

    env:
      GOFLAGS: -buildvcs=false

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Clean Go build cache
        run: go clean -cache -testcache

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: go test ./pkg/... -v -coverprofile=coverage-${{ matrix.os }}.out

      - name: Run integration tests
        run: go test ./tests/integration_test.go -v

      - name: Run CLI tests
        run: go test ./tests/cli_test.go -v -timeout 5m

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: coverage-${{ matrix.os }}.out

  test-python:
    name: Python Anomaly Detection Tests
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd pkg/anomaly
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run Python tests
        run: |
          cd pkg/anomaly
          python -m pytest test_service.py -v --cov=service --cov-report=xml

      - name: Upload Python coverage
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage
          path: pkg/anomaly/coverage.xml

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ZTAP Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ztap:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Anomaly Detector Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./pkg/anomaly
          file: ./pkg/anomaly/Dockerfile
          push: false
          tags: ztap-anomaly:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  ebpf-verification:
    name: eBPF Verification (Linux)
    runs-on: ubuntu-latest
    needs: test-go
    env:
      GOFLAGS: -buildvcs=false

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.2"

      - name: Install eBPF build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm make linux-headers-$(uname -r)

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ebpf-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ebpf-${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Compile eBPF program
        run: |
          make -C bpf
          sudo mkdir -p /usr/local/share/ztap/bpf
          sudo cp -v bpf/filter.o /usr/local/share/ztap/bpf/filter.o

      - name: Run eBPF integration test
        run: sudo --preserve-env=PATH,HOME,GOFLAGS,GOMODCACHE,GOCACHE go test -tags integration ./pkg/enforcer -run TestEBPFIntegrationLoadAndAttach -v

  coverage-report:
    name: Generate Coverage Report
    needs: [test-go, test-python]
    runs-on: ubuntu-latest

    steps:
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports

      - name: Display coverage structure
        run: ls -R coverage-reports

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… All tests passed! Coverage reports available in artifacts.'
            })
